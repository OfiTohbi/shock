python


import numpy as np
import matplotlib.pyplot as plt
from scipy.special import jn
from matplotlib.animation import FuncAnimation

# Parameters
k = 5  # Wave number for Bessel function
r = np.linspace(0, 20, 400)
theta = np.linspace(0, 2 * np.pi, 400)
time_steps = 50  # Number of time steps for the animation

# Create a 2D grid of r and theta
R, Theta = np.meshgrid(r, theta)
X = R * np.cos(Theta)
Y = R * np.sin(Theta)

# Initialize the plot
fig, ax = plt.subplots(figsize=(8, 8))
ax.set_xlim(-20, 20)
ax.set_ylim(-20, 20)
contour = ax.contourf([], [], [], cmap='coolwarm', levels=50)

# Function to update the wave pattern for each time step
def update(frame):
    ax.clear()
    # Time-dependent standing wave using Bessel function
    Z = jn(0, k * R) * np.cos(2 * np.pi * frame / time_steps)
    
    # Overlay the ablation pulse: a sharp localized increase in intensity
    ablation_center = (10 * np.cos(2 * np.pi * frame / time_steps), 
                       10 * np.sin(2 * np.pi * frame / time_steps))
    ablation_pulse = np.exp(-((X - ablation_center[0])**2 + (Y - ablation_center[1])**2) / 2)
    
    # Combine the standing wave with the ablation pulse
    combined_wave = Z + 10 * ablation_pulse
    
    # Plot the combined wave pattern
    contour = ax.contourf(X, Y, combined_wave, cmap='coolwarm', levels=50)
    
    # Add visualization elements (e.g., nurdles)
    nurdles_x = 5 * np.cos(2 * np.pi * frame / time_steps)
    nurdles_y = 5 * np.sin(2 * np.pi * frame / time_steps)
    ax.scatter(nurdles_x, nurdles_y, color='white', edgecolor='black', s=50, label='Nurdles')
    
    ax.set_title(f'Frame {frame}')
    ax.set_xlim(-20, 20)
    ax.set_ylim(-20, 20)
    ax.legend()

# Create animation
ani = FuncAnimation(fig, update, frames=time_steps, repeat=True)

# Show the plot
plt.show()
